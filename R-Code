bank_data = read_delim("bank-full.csv", delim =";")
str(bank_data)
summary(bank_data)
head(bank_data)

# Encoding categorical variables
bank_data$job <- as.numeric(factor(bank_data$job))
bank_data$marital <- as.numeric(factor(bank_data$marital))
bank_data$education <- as.numeric(factor(bank_data$education))
bank_data$default <- ifelse(bank_data$default == "yes", 1, 0)
bank_data$housing <- ifelse(bank_data$housing == "yes", 1, 0)
bank_data$loan <- ifelse(bank_data$loan == "yes", 1, 0)
bank_data$contact <- as.numeric(factor(bank_data$contact))
bank_data$month <- as.numeric(factor(bank_data$month))
bank_data$poutcome <- as.numeric(factor(bank_data$poutcome))
bank_data$y <- ifelse(bank_data$y == "yes", 1, 0)

# Calculate correlation matrix
cor_matrix <- cor(bank_data, use = "complete.obs")

# Visualize the correlation matrix
# Visualize the correlation matrix
corrplot(cor_matrix, add = TRUE, type = 'lower', method = 'square', order = 'AOE',
         diag = FALSE, tl.pos = 'n', cl.pos = 'n')

# Function to calculate WoE and IV for a given variable
calculate_woe_iv <- function(data, variable, target) {
  # Group by the variable and calculate counts for Good and Bad
  grouped <- data %>%
    group_by(!!sym(variable)) %>%
    summarise(Count = n(),
              Bad = sum(!!sym(target) == 1),  # Subscribing to a term deposit
              Good = sum(!!sym(target) == 0)) %>%  # Not subscribing
    mutate(Distr_Good = Good / sum(Good),
           Distr_Bad = Bad / sum(Bad)) %>%
    mutate(WoE = ifelse(Distr_Good == 0 | Distr_Bad == 0, 0, log(Distr_Good / Distr_Bad))) %>%
    mutate(IV = (Distr_Good - Distr_Bad) * WoE) %>%
    ungroup()
  
  # Calculate total IV for the variable
  total_iv <- sum(grouped$IV)
  
  return(list(WoE = grouped, IV = total_iv))
}

# Initialize an empty list to store results
iv_results <- list()

# Loop through each variable, except the target variable
for(variable in names(bank_data)) {
  if(variable != "y") { # Replace "y" with your target variable name if different
    # Calculate WoE and IV for each variable
    result <- calculate_woe_iv(bank_data, variable, "y")
    iv_results[[variable]] <- result$IV
  }
}

# View the IV for all variables
print(iv_results)

# Assume 'duration', 'balance', 'pdays', 'previous', 'poutcome' were selected based on IV and WoE
# Scale the variables
selected_vars <- bank_data[, c('duration', 'balance', 'pdays', 'previous', 'poutcome')]
scaled_vars <- scale(selected_vars)

# Determine the optimal number of clusters
wss <- sapply(1:10, function(k){sum(kmeans(scaled_vars, centers = k, nstart = 20)$withinss)})
elbow_plot <- ggplot(mapping = aes(x = 1:10, y = wss)) + geom_line() + scale_x_continuous(breaks = 1:10)
print(elbow_plot)

# Assume the optimal number of clusters is determined to be 3
set.seed(123)  # Set seed for reproducibility
kmeans_result <- kmeans(scaled_vars, centers = 3, nstart = 25)

# Attach cluster assignment back to the original data
bank_data$cluster <- kmeans_result$cluster

# Analyze the clusters
# This could involve summarizing the variables within each cluster or visualizing them
cluster_summary <- bank_data %>%
  group_by(cluster) %>%
  summarise_all(mean)

print(cluster_summary)

# Encode categorical variables numerically
# (assuming 'job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'poutcome' are the categorical variables)
categorical_vars <- c('job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'poutcome')
bank_data[categorical_vars] <- lapply(bank_data[categorical_vars], function(x) as.numeric(as.factor(x)))

# Scale the continuous predictor variables
# (assuming 'balance', 'duration', 'campaign', 'pdays', 'previous' are the continuous variables)
continuous_vars <- c('balance', 'duration', 'campaign', 'pdays', 'previous')
bank_data[continuous_vars] <- scale(bank_data[continuous_vars])

# Build the linear regression model using the lm() function
# Assuming 'y' is the target variable and based on previous analyses, we select 'duration', 'pdays', 'previous', 'poutcome' as predictors
model <- lm(y ~ duration + pdays + previous + poutcome, data = bank_data)

# Summary of the model to check for statistical significance and R-squared value
summary(model)

# Diagnostic plots to check for assumptions like homoscedasticity and normality of residuals
par(mfrow=c(2,2))
plot(model)

# Build the Bayesian logistic regression model
# Selecting 'duration', 'pdays', 'previous', 'poutcome' as predictors based on previous analyses
# Note: This is a computationally intensive process and may take some time
bayes_model <- brm(
  formula = y ~ duration + pdays + previous + poutcome,
  data = bank_data,
  family = bernoulli("logit"),
  prior = c(
    set_prior("normal(0, 10)", class = "b"),  # Weakly informative priors for regression coefficients
    set_prior("normal(0, 10)", class = "Intercept")
  ),
  chains = 4,
  iter = 2000,
  warmup = 1000,
  control = list(adapt_delta = 0.95)
)

# Summary of the Bayesian model
summary(bayes_model)

# Diagnostic plots
# Plot for MCMC diagnostics
mcmc_plot <- mcmc_trace(bayes_model)
mcmc_plot

# Plot for posterior distributions of parameters
posterior_plot <- mcmc_areas(bayes_model)
posterior_plot
